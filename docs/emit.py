#!/usr/bin/env python3
"""
Produce documentation for all cijoe packages
"""
import re
import subprocess
from pathlib import Path
from pprint import pprint

from jinja2 import Template

from cijoe.core.resources import get_resources

DOC_ROOT_PKGS = "packages"

TEMPLATE_PKG_OVERVIEW = """..
.. This file is generated by emit.py any manual changes are overwritten
..

.. _sec-packages:

==========
 Packages
==========

A **cijoe** package is a collection of :ref:`sec-resources`, which may optionally
include a Python module, packaged within a Python package. Including a Python module is
useful when multiple :ref:`sec-resources-scripts` share common implementation details.

The packages covered in this section are **built-in**, meaning they are included by
default with the **cijoe** installation. You can also create your own package, and the
**cijoe** infrastructure will automatically recognize it, allowing it to be loaded in
the same way as the **built-in** :ref:`sec-resources`.

If you prefer not to create and distribute a Python package via PyPi, **cijoe** can
still collect and use your locally available :ref:`sec-resources` without additional
steps.

.. toctree::
   :maxdepth: 2
   :hidden:

{% for pkg_name, script_name in packages.items() %}
   {{ pkg_name }}/index.rst
{%- endfor %}
"""

TEMPLATE_PKG_INDEX = """
.. _sec-packages-{{ pkg_name }}:

{{ pkg_name }}
{% set pkg_name_len = pkg_name | length -%}
{{ "=" * pkg_name_len }}

These are the scripts provided in the package, they are listed by the **full**
name that you can use to refer to them in a workflow.

Scripts
-------

.. toctree::
   :maxdepth: 2
   :hidden:

{% for script_name in scripts %}
   scripts/{{ script_name }}.rst
{%- endfor %}
"""

TEMPLATE_SCRIPT_INDEX = """
.. _sec-packages-{{ pkg_name }}-{{script_name}}:

{% set script_title = pkg_name + '.' + script_name -%}
{% set script_title_len = script_title | length -%}
{{ script_title }}
{{ "~" * script_title_len }}

.. automodule:: cijoe.{{ pkg_name }}.scripts.{{ script_name }}
   :members:

CLI arguments
-------------
{{ options }}
"""


def setup_templates():
    return {
        "pkg_overview": Template(TEMPLATE_PKG_OVERVIEW),
        "pkg_index": Template(TEMPLATE_PKG_INDEX),
        "script_index": Template(TEMPLATE_SCRIPT_INDEX),
    }


def main():
    packages = {}
    templates = setup_templates()

    for key, props in get_resources().get("scripts").items():
        if "." not in key:
            continue

        pkg_name, script_name = key.split(".")
        if pkg_name not in packages:
            packages[pkg_name] = []

        packages[pkg_name].append(script_name)
        packages[pkg_name].sort()

    # Create package page
    pkgs_index_rst = Path("source") / DOC_ROOT_PKGS / "index.rst"
    pkgs_index_rst.parent.mkdir(parents=True, exist_ok=True)
    with pkgs_index_rst.open("w") as rst:
        rst.write(templates["pkg_overview"].render(packages=packages))

    for pkg_name, scripts in packages.items():
        pkg_path = Path("source") / DOC_ROOT_PKGS / pkg_name

        # Create package index
        pkg_path.mkdir(parents=True, exist_ok=True)
        pkg_index_rst = pkg_path / "index.rst"
        with pkg_index_rst.open("w") as rst:
            rst.write(templates["pkg_index"].render(pkg_name=pkg_name, scripts=scripts))

        for script_name in scripts:
            script_path = pkg_path / "scripts" / f"{script_name}.rst"

            res = subprocess.run(
                ["cijoe", f"{pkg_name}.{script_name}", "--help"],
                capture_output=True,
                text=True,
            )
            options = next(
                args for args in res.stdout.split("\n\n") if args.startswith("options")
            )
            options = re.sub(
                r"\n {2,}([^-])", r"  \1", options
            )  # put arg help on same line as argument.
            options = re.sub(
                r"  (-.*?)\s{2,}(.*)", r"\n* ``\1``\n\n  \2", options
            )  # setup as bullet points

            # Create package index
            script_path.parent.mkdir(parents=True, exist_ok=True)
            with script_path.open("w") as rst:
                rst.write(
                    templates["script_index"].render(
                        pkg_name=pkg_name, script_name=script_name, options=options
                    )
                )


if __name__ == "__main__":
    main()
